class pair implements Comparable<pair>{
        int a,b;
        pair(int a,int b){
            this.a = a;
            this.b = b;
        }
        public int compareTo(pair o){
            if(this.a > o.a)
                return 1;
            else if(this.a < o.a)
                return -1;
            else{
                if(this.b > o.b)
                    return 1;
                else if(this.b < o.b)
                    return -1;
                else
                    return 0;
            }
        }
}
class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length == 1)
            return intervals;
        int length = intervals.length;
        pair[] p = new pair[length];
        for(int i=0;i<length;i++)
            p[i] = new pair(intervals[i][0],intervals[i][1]);
        Arrays.sort(p);
        ArrayList<Integer> l = new ArrayList<>();
        l.add(p[0].a);
        int flag = 0,flag1 = 0;
        for(int i=0;i<length;i++){
            int num1 = p[i].a;
            int num2 = p[i].b;
            if(l.isEmpty())
                l.add(num1);
            if(flag1 == 1){
            if(num1>l.get(l.size()-1))
                l.add(num1);
            else
                flag = 1;
            }
            flag1 = 1;
            if(num2>=l.get(l.size()-1)){
                if(flag == 1){
                    flag = 0;
                    l.set(l.size()-1,num2);
                }
                else
                    l.add(num2);
            }
            else
                flag = 0;
        }
        int size = l.size()/2;
        int[][] res = new int[size][2];
        int k = 0;
        for(int i=0;i<l.size();i+=2){
            res[k][0] = l.get(i);
            res[k][1] = l.get(i+1);
            k++;
        }
        return res;
    }
}